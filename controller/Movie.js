const { sequelize } = require('../models');
const db = require('../models');
const fs = require('fs');
const path = require('path'); 
const { Op, fn, col, literal } = require('sequelize');

const getAllMovies = async (req, res)  => {
    const allMovies  = await db.Movie.findAll();
    res.status(200).send(allMovies);
};

const getMovieByID = async (req, res)  => {
    const { id } = req.params;
    try {
        const movieByID = await db.Movie.findByPk(id, {
            include: [
                {
                    model: db.Actor, // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö Actor
                    through: { attributes: [] }, // ‡πÑ‡∏°‡πà‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡∏•‡∏≤‡∏á Act
                    attributes: ['id', 'actorname', 'actorimagePath', 'role', 'country']
                },
                {
                    model: db.Genre, // ‡∏î‡∏∂‡∏á Genre ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
                    through: { attributes: [] }, // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡∏•‡∏≤‡∏á ‡πÄ‡∏ä‡πà‡∏ô MovieGenre
                    attributes: ['id', 'genreName'] 
                }
            ]
        });
        
        if (!movieByID) {
            return res.status(404).send({ message: "Movie not found" });
        }
    res.status(200).send(movieByID);
    } catch {
        res.status(500).send({ message: "Error fetching movies" });
    }
};

const getMovieByRank = async (req, res)  => {
    try {
        const topMovies = await db.Movie.findAll({
            where: { rank: { [Op.ne]: null } },
            order: [["rank","ASC"]], // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö 1 ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ
            include: [
                {
                model: db.Comment,
                attributes: [],
                },
            ],
            attributes: {
                include: [
                    [fn("AVG", col("Comments.ratingScore")), "averageRating"],
                    [fn("COUNT", col("Comments.id")), "reviewCount"]
                ]
    
            },
             group: ['Movie.id'],
             raw: true,
        });
        
        res.status(200).json(topMovies);
    } catch (error) {
        console.error("üî• SERVER ERROR:", error);
        res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" });
    }
};

const deleteMovies = async (req, res) => {
    try {
        console.log(req.params.id); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö id
        await db.Movie.destroy({
            where: { id: req.params.id } // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ id ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ñ‡πà‡∏≤
        });
        res.status(200).send({ message: "Movie deleted successfully" });
    } catch (error) {
        console.error('Failed to delete movie:', error);
        res.status(500).send({ error: 'Failed to delete movie' });
    }
};

const createMovies = async (req, res) => {
    try {
        const { title, engTitle, date, description, Atcinema, age, lang, trailerUrl, genreIds } = req.body;
        console.log('Uploaded Files:', req.files); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Multer ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const posterimagePath = req.files['posterimagePath']
            ? req.files['posterimagePath'][0].path
            : null;

        const backgroundimagePath = req.files['backgroundimagePath']
            ? req.files['backgroundimagePath'].map(file => file.path) // ‡πÄ‡∏Å‡πá‡∏ö‡∏ó‡∏∏‡∏Å path ‡πÄ‡∏õ‡πá‡∏ô array
            : [];

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡∏±‡∏á‡πÉ‡∏´‡∏°‡πà
        const newMovie = await db.Movie.create({
            title,
            engTitle,
            date,
            description,
            age,
            Atcinema: Atcinema === 'true', // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ String ‡πÄ‡∏õ‡πá‡∏ô Boolean
            posterimagePath,
            backgroundimagePath: JSON.stringify(backgroundimagePath),
            lang: JSON.stringify(lang),
            trailerUrl
        });

        console.log("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏ô‡∏±‡∏á", genreIds);
        let parsedGenreIds = genreIds;
        if (typeof parsedGenreIds === "string") {
            try {
                parsedGenreIds = JSON.parse(parsedGenreIds);
            } catch (error) {
                console.error("Error parsing genreIds:", error);
                return res.status(400).json({ message: "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö genreIds ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" })
            }
        }

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå
        if (!Array.isArray(parsedGenreIds)) {
            return res.status(400).json({ message: "genreIds ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå" });
        }

        // ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏´‡∏ô‡∏±‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (parsedGenreIds.length > 0) {
            console.log("Genre IDs to associate:", parsedGenreIds);
            
            const genres = await db.Genre.findAll({
                where: { id: { [Op.in]: parsedGenreIds } }
            });

            console.log("Genres found:", genres.map(m => m.id));

            if (genres.length > 0) {
                await newMovie.addGenres(genres);
                console.log("Genres linked to actor successfully!");
            } else {
                console.log("No matching genres found.");
            }
        }

        res.status(201).json({ message: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", movie: newMovie });
    } catch (error) {
        try {
            if (req.files['posterimagePath']) {
                const posterPath = req.files['posterimagePath'][0].path;
                if (fs.existsSync(posterPath)) fs.unlinkSync(posterPath); // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏õ‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå
            }
        } catch (fsError) {
            console.error("Error deleting poster image file: ", fsError);
        }

        try {
            if (req.files['backgroundimagePath']) {
                req.files['backgroundimagePath'].forEach(file => {
                    if (fs.existsSync(file.path)) fs.unlinkSync(file.path); // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
                });
            }
        } catch (fsError) {
            console.error("Error deleting background image files: ", fsError);
        }

        res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå" });
    }
};

const updateMovies = async (req, res) => {
    try {
        const { id } = req.params;
        const { title, engTitle, date, description, Atcinema, age, lang, trailerUrl, genreIds } = req.body;

        const movie = await db.Movie.findByPk(id);
        if (!movie) {
            return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç" });
        }

        let posterimagePath = movie.posterimagePath;
        if (req.files?.posterimagePath)  {
            if (movie.posterimagePath) {
               const oldImagePath = path.join(__dirname, '..', movie.posterimagePath);
                if (fs.existsSync(oldImagePath)) {
                    fs.unlinkSync(oldImagePath);
                }
            }
            posterimagePath = req.files['posterimagePath'][0].path; // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï path ‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà
        }

        let backgroundimagePath = movie.backgroundimagePath ? JSON.parse(movie.backgroundimagePath) : [];
        if (req.files?.backgroundimagePath) {
            // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô
            if (Array.isArray(backgroundimagePath)) {
                backgroundimagePath.forEach(oldPath => {
                    const oldBgPath = path.join(__dirname, '..', oldPath);
                    if (fs.existsSync(oldBgPath)) {
                        fs.unlinkSync(oldBgPath);
                    }
                });
            }

            // ‡πÉ‡∏ä‡πâ path ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
            backgroundimagePath = req.files['backgroundimagePath'].map(file => file.path);
        }

        await movie.update({
            title: title || movie.title,  // ‡∏ñ‡πâ‡∏≤ title ‡πÄ‡∏õ‡πá‡∏ô undefined ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°
            engTitle: engTitle || movie.engTitle,
            date: date || movie.date,
            description: description || movie.description,
            Atcinema: Atcinema === 'true', // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡πà‡∏≤ Atcinema ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô boolean
            age: age || movie.age,
            lang: JSON.stringify(lang || JSON.parse(movie.lang)), // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏†‡∏≤‡∏©‡∏≤
            posterimagePath,
            backgroundimagePath: JSON.stringify(backgroundimagePath),
            trailerUrl: trailerUrl || movie.trailerUrl
        });

        let parsedGenreIds = genreIds
        console.log("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏ô‡∏±‡∏á", parsedGenreIds);
        if (typeof parsedGenreIds === "string") {
            try {
                parsedGenreIds = JSON.parse(parsedGenreIds);
            } catch (error) {
                console.error("Error parsing genreIds:", error);
                return res.status(400).json({ message: "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö genreIds ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" })
            }
        }

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå
        if (!Array.isArray(parsedGenreIds)) {
            return res.status(400).json({ message: "genreIds ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå" });
        }

        if (Array.isArray(parsedGenreIds)) {
            parsedGenreIds = parsedGenreIds.flatMap(item => {
                try {
                    return JSON.parse(item); // ‡πÅ‡∏õ‡∏•‡∏á JSON string ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå‡∏à‡∏£‡∏¥‡∏á
                } catch (error) {
                    return item.split(',').map(Number); // ‡πÅ‡∏¢‡∏Å string ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
                }
            });
        }
          
        // ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏´‡∏ô‡∏±‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (parsedGenreIds.length > 0) {
            console.log("Genre IDs to associate:", parsedGenreIds);
            
            const genres = await db.Genre.findAll({
                where: { id: { [Op.in]: parsedGenreIds } }
            });

            console.log("Genres found:", genres.map(m => m.id));

            if (genres.length > 0) {
                await movie.setGenres(genres);
                console.log("Genres linked to actor successfully!");
            } else {
                console.log("No matching genres found.");
            }
        }

        res.status(200).json({message:"‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", movie})
    } catch (error) {
        try {
            if (req.files['posterimagePath']) {
                const posterPath = req.files['posterimagePath'][0].path;
                if (fs.existsSync(posterPath)) fs.unlinkSync(posterPath); // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏õ‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå
            }
        } catch (fsError) {
            console.error("Error deleting poster image file: ", fsError);
        }

        try {
            if (req.files['backgroundimagePath']) {
                req.files['backgroundimagePath'].forEach(file => {
                    if (fs.existsSync(file.path)) fs.unlinkSync(file.path); // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
                });
            }
        } catch (fsError) {
            console.error("Error deleting background image files: ", fsError);
        }
        res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå" });
    }
}

module.exports = {
    getMovieByID,
    getAllMovies,
    getMovieByRank,
    deleteMovies,
    createMovies,
    updateMovies
};